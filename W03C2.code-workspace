{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"textmarker.savedHighlights": [
			{
				"pattern": {
					"type": "string",
					"expression": "//editRound: Event handler called when \"View/Edit\" button clicked in \"My Rounds\"\r\n//table. roundIndex indicates the index of the round that was clicked. Grab\r\n//the round data from local storage, fill it into the edit form and transition\r\n//to the view/edit round page.\r\nfunction editRound(roundIndex) {\r\n  //Grab appropriate round to view/edit from localStorage\r\n  let data = JSON.parse(localStorage.getItem(\"speedgolfUserData\"));\r\n  let user = localStorage.getItem(\"userName\");\r\n  \r\n  //Pre-populate form with round data\r\n  fillRoundForm(data[user].rounds[roundIndex]);\r\n\r\n  //Set local storage var to index of round being edited. This will allow us to\r\n  //save updated data to correct round when the user clicks \"Update Round Data\"\r\n  localStorage.setItem(\"roundIndex\",roundIndex);\r\n\r\n  //Transition to round view/edit page with \"Update\" label for form submit button\r\n  document.getElementById(\"submitBtnLabel\").textContent = \"Update Round Data\";\r\n  transitionToLockedPage(\"logRoundDiv\",\"View/Edit Round\");\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//editRound: Event handler called when \"View/Edit\" button clicked in \"My Rounds\"\r\n//table. roundIndex indicates the index of the round that was clicked. Grab\r\n//the round data from local storage, fill it into the edit form and transition\r\n//to the view/edit round page.\r\nfunction editRound(roundIndex) {\r\n  //Grab appropriate round to view/edit from localStorage\r\n  let data = JSON.parse(localStorage.getItem(\"speedgolfUserData\"));\r\n  let user = localStorage.getItem(\"userName\");\r\n  \r\n  //Pre-populate form with round data\r\n  fillRoundForm(data[user].rounds[roundIndex]);\r\n\r\n  //Set local storage var to index of round being edited. This will allow us to\r\n  //save updated data to correct round when the user clicks \"Update Round Data\"\r\n  localStorage.setItem(\"roundIndex\",roundIndex);\r\n\r\n  //Transition to round view/edit page with \"Update\" label for form submit button\r\n  document.getElementById(\"saveIcon\").classList.remove(\"fas\",\"fa-save\");\r\n  document.getElementById(\"saveIcon\").classList.add(\"fas\",\"fa-edit\");\r\n  document.getElementById(\"submitBtnLabel\").textContent = \"Update Round Data\";\r\n  transitionToLockedPage(\"logRoundDiv\",\"View/Edit Round\");\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "<button type=\"submit\" class=\"btn btn-primary btn-block btncolortheme\"\r\n          style=\"width:70%; font-size: 36px\"><span id=\"saveIcon\"\r\n          class-\"fas\"></span>&nbsp;<span id=\"submitBtnLabel\"></span></button>",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//fillRoundForm -- When the user chooses to view/edit an existing round, we need\r\n//to fill the round form with the corresponding round data and provide the\r\n//option to update the data\r\nfunction fillRoundForm(round) {\r\n  document.getElementById(\"roundDate\").value = round.date;\r\n  document.getElementById(\"roundCourse\").value = round.course;\r\n  document.getElementById(\"roundType\").value = round.type;\r\n  document.getElementById(\"roundHoles\").value = round.numHoles;\r\n  document.getElementById(\"roundStrokes\").value = round.strokes;\r\n  document.getElementById(\"roundMinutes\").value = round.minutes;\r\n  document.getElementById(\"roundSeconds\").value = round.seconds;\r\n  document.getElementById(\"roundSGS\").value = round.SGS;\r\n  document.getElementById(\"roundNotes\").value = round.notes;\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//transitionToLockedPage: Take the user to a locked page that is subsidiary to\r\n//the main mode page. The new page is identified by lockedPageId and should have\r\n//the title lockedPageTitle. Note: Any other tweaks to the locked page (e.g., \r\n//changing of button labels or hiding/showing of input fields and controls) must\r\n//be done manually before or after calling this function.\r\nfunction transitionToLockedPage(lockedPageId, lockedPageTitle) {\r\n  //Swap pages\r\n  document.getElementById(mode + \"MainDiv\").style.display = \"none\";\r\n  document.getElementById(lockedPageId).style.display = \"block\";\r\n  //Change page title\r\n  document.getElementById(\"topBarTitle\").textContent = lockedPageTitle;\r\n  //Set pageLocked to true, thus indicating that we're on a page that may only\r\n  //be exited by clicking on the left arrow at top left\r\n  pageLocked = true;\r\n  //When pageLocked is true, the menu  icon is the left arrow\r\n  document.getElementById(\"menuBtnIcon\").classList.remove(\"fa-times\");\r\n  document.getElementById(\"menuBtnIcon\").classList.remove(\"fa-bars\");\r\n  document.getElementById(\"menuBtnIcon\").classList.add(\"fa-arrow-left\");\r\n  //When pageLocked is true, the bottom bar buttons are disabled\r\n  document.getElementById(\"bottomBar\").classList.add(\"disabledButton\");\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			}
		]
	}
}